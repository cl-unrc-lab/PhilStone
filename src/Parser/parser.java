
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 30 08:44:59 ART 2020
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import java.util.*;
import Spec.*;
import FormulaSpec.*;
import Utils.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 30 08:44:59 ART 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\041\003\000\002\030" +
    "\015\000\002\027\002\000\002\027\004\000\002\026\006" +
    "\000\002\036\002\000\002\036\004\000\002\037\011\000" +
    "\002\037\010\000\002\025\003\000\002\025\004\000\002" +
    "\021\010\000\002\021\005\000\002\023\003\000\002\023" +
    "\005\000\002\024\005\000\002\022\014\000\002\017\002" +
    "\000\002\017\006\000\002\050\003\000\002\050\004\000" +
    "\002\047\020\000\002\047\014\000\002\013\005\000\002" +
    "\016\003\000\002\016\005\000\002\020\003\000\002\020" +
    "\005\000\002\055\006\000\002\055\002\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\043\005\000\002\044\005\000\002" +
    "\045\003\000\002\045\005\000\002\046\005\000\002\003" +
    "\003\000\002\004\003\000\002\004\005\000\002\005\003" +
    "\000\002\005\005\000\002\007\003\000\002\007\005\000" +
    "\002\006\003\000\002\010\003\000\002\010\005\000\002" +
    "\010\005\000\002\011\003\000\002\011\005\000\002\011" +
    "\005\000\002\012\003\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\005\000\002\002\010\000\002\002\005\000\002\002" +
    "\010\000\002\002\006\000\002\002\010\000\002\002\006" +
    "\000\002\002\005\000\002\002\003\000\002\042\002\000" +
    "\002\042\007\000\002\042\007\000\002\042\010\000\002" +
    "\042\010\000\002\042\007\000\002\042\007\000\002\042" +
    "\007\000\002\042\010\000\002\042\010\000\002\042\007" +
    "\000\002\042\006\000\002\042\006\000\002\042\007\000" +
    "\002\042\007\000\002\042\006\000\002\033\010\000\002" +
    "\034\006\000\002\032\003\000\002\032\005\000\002\031" +
    "\005\000\002\051\003\000\002\051\005\000\002\052\006" +
    "\000\002\052\007\000\002\053\003\000\002\053\005\000" +
    "\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\004\004\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\u010a\001\002\000\004\063\007\001\002" +
    "\000\012\026\ufffb\027\ufffb\035\ufffb\063\ufffb\001\002\000" +
    "\012\026\011\027\014\035\ufffe\063\ufffe\001\002\000\004" +
    "\063\015\001\002\000\006\035\030\063\015\001\002\000" +
    "\016\026\ufffa\027\ufffa\034\ufffa\035\ufffa\063\ufffa\077\ufffa" +
    "\001\002\000\004\063\015\001\002\000\012\017\uffe8\020" +
    "\uffe8\021\uffe8\055\uffe8\001\002\000\006\021\017\055\020" +
    "\001\002\000\004\063\027\001\002\000\004\015\021\001" +
    "\002\000\004\064\023\001\002\000\006\016\025\021\024" +
    "\001\002\000\006\016\uffe6\021\uffe6\001\002\000\004\064" +
    "\026\001\002\000\016\026\ufff8\027\ufff8\034\ufff8\035\ufff8" +
    "\063\ufff8\077\ufff8\001\002\000\006\016\uffe5\021\uffe5\001" +
    "\002\000\012\017\uffe7\020\uffe7\021\uffe7\055\uffe7\001\002" +
    "\000\004\063\307\001\002\000\006\020\277\021\017\001" +
    "\002\000\012\034\ufffd\035\ufffd\063\ufffd\077\ufffd\001\002" +
    "\000\006\035\ufff7\037\ufff7\001\002\000\006\035\030\037" +
    "\036\001\002\000\004\071\072\001\002\000\004\011\040" +
    "\001\002\000\006\035\ufff6\037\ufff6\001\002\000\004\012" +
    "\041\001\002\000\004\015\042\001\002\000\004\063\015" +
    "\001\002\000\004\016\071\001\002\000\004\017\uffa6\001" +
    "\002\000\004\017\051\001\002\000\006\020\047\021\017" +
    "\001\002\000\004\063\050\001\002\000\004\017\uffa4\001" +
    "\002\000\006\063\015\074\055\001\002\000\004\017\uffa3" +
    "\001\002\000\004\017\uffa5\001\002\000\004\017\067\001" +
    "\002\000\004\063\056\001\002\000\004\011\057\001\002" +
    "\000\006\012\062\063\060\001\002\000\006\012\uff9d\021" +
    "\uff9d\001\002\000\006\012\065\021\064\001\002\000\004" +
    "\017\uffa1\001\002\000\006\012\uff9f\021\uff9f\001\002\000" +
    "\004\063\060\001\002\000\004\017\uffa0\001\002\000\006" +
    "\012\uff9e\021\uff9e\001\002\000\006\016\uffa7\074\055\001" +
    "\002\000\004\017\uffa2\001\002\000\004\071\uffa8\001\002" +
    "\000\004\020\073\001\002\000\066\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\011\112\013\106\017\uffb8\022\uffb8\023\uffb8" +
    "\030\110\031\120\040\123\044\075\045\074\046\113\047" +
    "\126\050\105\055\uffb8\057\111\060\125\061\104\062\121" +
    "\063\107\064\100\067\101\070\117\001\002\000\012\013" +
    "\255\047\256\050\254\057\253\001\002\000\076\005\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\011\112\012\uffb8\013\106\014" +
    "\uffb8\017\uffb8\022\uffb8\023\uffb8\030\110\031\120\040\123" +
    "\044\075\045\074\046\113\047\126\050\105\051\uffb8\052" +
    "\uffb8\055\uffb8\057\111\060\125\061\104\062\121\063\107" +
    "\064\100\067\101\070\117\001\002\000\004\017\244\001" +
    "\002\000\020\012\uffd7\014\uffd7\017\uffd7\022\uffd7\023\135" +
    "\051\uffd7\052\uffd7\001\002\000\032\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\012\uffc2\014\uffc2\017\uffc2\022\uffc2\023\uffc2" +
    "\051\uffc2\052\uffc2\055\uffc2\001\002\000\004\011\235\001" +
    "\002\000\026\005\231\006\232\012\uffd1\014\uffd1\017\uffd1" +
    "\022\uffd1\023\uffd1\051\uffd1\052\uffd1\055\uffd1\001\002\000" +
    "\022\012\uffd3\014\uffd3\017\uffd3\022\uffd3\023\uffd3\051\uffd3" +
    "\052\uffd3\055\227\001\002\000\032\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\012\uffc5\014\uffc5\017\uffc5\022\uffc5\023\uffc5" +
    "\051\uffc5\052\uffc5\055\uffc5\001\002\000\004\013\224\001" +
    "\002\000\070\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\112" +
    "\013\106\022\uffb8\023\uffb8\030\110\031\120\040\123\044" +
    "\075\045\074\046\113\047\126\050\105\051\uffb8\052\uffb8" +
    "\055\uffb8\057\111\060\125\061\104\062\121\063\107\064" +
    "\100\067\101\070\117\001\002\000\034\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\012\uffc3\014\uffc3\017\uffc3\022\uffc3\023" +
    "\uffc3\051\uffc3\052\uffc3\055\uffc3\073\207\001\002\000\076" +
    "\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\112\012\uffb8\013" +
    "\106\014\uffb8\017\uffb8\022\uffb8\023\uffb8\030\110\031\120" +
    "\040\123\044\075\045\074\046\113\047\126\050\105\051" +
    "\uffb8\052\uffb8\055\uffb8\057\111\060\125\061\104\062\121" +
    "\063\107\064\100\067\101\070\117\001\002\000\004\013" +
    "\203\001\002\000\066\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\112\012\uffb8\013\106\022\uffb8\023\uffb8\030\110\031" +
    "\120\040\123\044\075\045\074\046\113\047\126\050\105" +
    "\055\uffb8\057\111\060\125\061\104\062\121\063\107\064" +
    "\100\067\101\070\117\001\002\000\012\013\157\047\160" +
    "\050\156\057\155\001\002\000\032\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\012\uffcd\014\uffcd\017\uffcd\022\uffcd\023\uffcd" +
    "\051\uffcd\052\uffcd\055\uffcd\001\002\000\032\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\012\uffb9\014\uffb9\017\uffb9\022\uffb9" +
    "\023\uffb9\051\uffb9\052\uffb9\055\uffb9\001\002\000\032\005" +
    "\uffd0\006\uffd0\007\152\010\151\012\uffd0\014\uffd0\017\uffd0" +
    "\022\uffd0\023\uffd0\051\uffd0\052\uffd0\055\uffd0\001\002\000" +
    "\004\011\142\001\002\000\076\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\112\012\uffb8\013\106\014\uffb8\017\uffb8\022" +
    "\uffb8\023\uffb8\030\110\031\120\040\123\044\075\045\074" +
    "\046\113\047\126\050\105\051\uffb8\052\uffb8\055\uffb8\057" +
    "\111\060\125\061\104\062\121\063\107\064\100\067\101" +
    "\070\117\001\002\000\032\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\012\uffc4\014\uffc4\017\uffc4\022\uffc4\023\uffc4\051\uffc4" +
    "\052\uffc4\055\uffc4\001\002\000\032\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\012\uffca\014\uffca\017\uffca\022\uffca\023\uffca" +
    "\051\uffca\052\uffca\055\uffca\001\002\000\004\073\137\001" +
    "\002\000\016\012\uffd8\014\uffd8\017\uffd8\022\133\051\uffd8" +
    "\052\uffd8\001\002\000\032\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\012\uffc6\014\uffc6\017\uffc6\022\uffc6\023\uffc6\051\uffc6" +
    "\052\uffc6\055\uffc6\001\002\000\004\013\130\001\002\000" +
    "\020\012\uffd5\014\uffd5\017\uffd5\022\uffd5\023\uffd5\051\uffd5" +
    "\052\uffd5\001\002\000\066\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\112\013\106\014\uffb8\022\uffb8\023\uffb8\030\110" +
    "\031\120\040\123\044\075\045\074\046\113\047\126\050" +
    "\105\055\uffb8\057\111\060\125\061\104\062\121\063\107" +
    "\064\100\067\101\070\117\001\002\000\004\014\132\001" +
    "\002\000\032\005\uffad\006\uffad\007\uffad\010\uffad\012\uffad" +
    "\014\uffad\017\uffad\022\uffad\023\uffad\051\uffad\052\uffad\055" +
    "\uffad\001\002\000\076\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\112\012\uffb8\013\106\014\uffb8\017\uffb8\022\uffb8\023" +
    "\uffb8\030\110\031\120\040\123\044\075\045\074\046\113" +
    "\047\126\050\105\051\uffb8\052\uffb8\055\uffb8\057\111\060" +
    "\125\061\104\062\121\063\107\064\100\067\101\070\117" +
    "\001\002\000\020\012\uffd6\014\uffd6\017\uffd6\022\uffd6\023" +
    "\135\051\uffd6\052\uffd6\001\002\000\076\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\011\112\012\uffb8\013\106\014\uffb8\017" +
    "\uffb8\022\uffb8\023\uffb8\030\110\031\120\040\123\044\075" +
    "\045\074\046\113\047\126\050\105\051\uffb8\052\uffb8\055" +
    "\uffb8\057\111\060\125\061\104\062\121\063\107\064\100" +
    "\067\101\070\117\001\002\000\020\012\uffd4\014\uffd4\017" +
    "\uffd4\022\uffd4\023\uffd4\051\uffd4\052\uffd4\001\002\000\004" +
    "\063\140\001\002\000\032\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\012\uffbf\014\uffbf\017\uffbf\022\uffbf\023\uffbf\051\uffbf" +
    "\052\uffbf\055\uffbf\001\002\000\032\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\012\uffc8\014\uffc8\017\uffc8\022\uffc8\023\uffc8" +
    "\051\uffc8\052\uffc8\055\uffc8\001\002\000\006\040\144\063" +
    "\143\001\002\000\004\012\150\001\002\000\004\073\145" +
    "\001\002\000\004\063\146\001\002\000\004\012\147\001" +
    "\002\000\032\005\uffbc\006\uffbc\007\uffbc\010\uffbc\012\uffbc" +
    "\014\uffbc\017\uffbc\022\uffbc\023\uffbc\051\uffbc\052\uffbc\055" +
    "\uffbc\001\002\000\032\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\012\uffbb\014\uffbb\017\uffbb\022\uffbb\023\uffbb\051\uffbb\052" +
    "\uffbb\055\uffbb\001\002\000\076\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\112\012\uffb8\013\106\014\uffb8\017\uffb8\022" +
    "\uffb8\023\uffb8\030\110\031\120\040\123\044\075\045\074" +
    "\046\113\047\126\050\105\051\uffb8\052\uffb8\055\uffb8\057" +
    "\111\060\125\061\104\062\121\063\107\064\100\067\101" +
    "\070\117\001\002\000\076\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\112\012\uffb8\013\106\014\uffb8\017\uffb8\022\uffb8" +
    "\023\uffb8\030\110\031\120\040\123\044\075\045\074\046" +
    "\113\047\126\050\105\051\uffb8\052\uffb8\055\uffb8\057\111" +
    "\060\125\061\104\062\121\063\107\064\100\067\101\070" +
    "\117\001\002\000\032\005\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\012\uffcc\014\uffcc\017\uffcc\022\uffcc\023\uffcc\051\uffcc\052" +
    "\uffcc\055\uffcc\001\002\000\032\005\uffcb\006\uffcb\007\uffcb" +
    "\010\uffcb\012\uffcb\014\uffcb\017\uffcb\022\uffcb\023\uffcb\051" +
    "\uffcb\052\uffcb\055\uffcb\001\002\000\004\013\176\001\002" +
    "\000\004\013\173\001\002\000\070\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\011\112\013\106\022\uffb8\023\uffb8\030\110" +
    "\031\120\040\123\044\075\045\074\046\113\047\126\050" +
    "\105\051\uffb8\052\uffb8\055\uffb8\057\111\060\125\061\104" +
    "\062\121\063\107\064\100\067\101\070\117\001\002\000" +
    "\004\013\161\001\002\000\066\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\112\013\106\014\uffb8\022\uffb8\023\uffb8\030" +
    "\110\031\120\040\123\044\075\045\074\046\113\047\126" +
    "\050\105\055\uffb8\057\111\060\125\061\104\062\121\063" +
    "\107\064\100\067\101\070\117\001\002\000\004\014\163" +
    "\001\002\000\032\005\uffb7\006\uffb7\007\uffb7\010\uffb7\012" +
    "\uffb7\014\uffb7\017\uffb7\022\uffb7\023\uffb7\051\uffb7\052\uffb7" +
    "\055\uffb7\001\002\000\006\051\166\052\165\001\002\000" +
    "\020\013\106\014\uffb8\045\074\046\113\047\126\050\105" +
    "\057\111\001\002\000\066\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\112\013\106\014\uffb8\022\uffb8\023\uffb8\030\110" +
    "\031\120\040\123\044\075\045\074\046\113\047\126\050" +
    "\105\055\uffb8\057\111\060\125\061\104\062\121\063\107" +
    "\064\100\067\101\070\117\001\002\000\004\014\170\001" +
    "\002\000\032\005\uffb5\006\uffb5\007\uffb5\010\uffb5\012\uffb5" +
    "\014\uffb5\017\uffb5\022\uffb5\023\uffb5\051\uffb5\052\uffb5\055" +
    "\uffb5\001\002\000\004\014\172\001\002\000\032\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\012\uffb4\014\uffb4\017\uffb4\022" +
    "\uffb4\023\uffb4\051\uffb4\052\uffb4\055\uffb4\001\002\000\066" +
    "\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\112\013\106\014" +
    "\uffb8\022\uffb8\023\uffb8\030\110\031\120\040\123\044\075" +
    "\045\074\046\113\047\126\050\105\055\uffb8\057\111\060" +
    "\125\061\104\062\121\063\107\064\100\067\101\070\117" +
    "\001\002\000\004\014\175\001\002\000\032\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\012\uffb3\014\uffb3\017\uffb3\022\uffb3" +
    "\023\uffb3\051\uffb3\052\uffb3\055\uffb3\001\002\000\066\005" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\011\112\013\106\014\uffb8" +
    "\022\uffb8\023\uffb8\030\110\031\120\040\123\044\075\045" +
    "\074\046\113\047\126\050\105\055\uffb8\057\111\060\125" +
    "\061\104\062\121\063\107\064\100\067\101\070\117\001" +
    "\002\000\004\014\200\001\002\000\032\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\012\uffb6\014\uffb6\017\uffb6\022\uffb6\023" +
    "\uffb6\051\uffb6\052\uffb6\055\uffb6\001\002\000\004\012\202" +
    "\001\002\000\032\005\uffba\006\uffba\007\uffba\010\uffba\012" +
    "\uffba\014\uffba\017\uffba\022\uffba\023\uffba\051\uffba\052\uffba" +
    "\055\uffba\001\002\000\066\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\112\013\106\014\uffb8\022\uffb8\023\uffb8\030\110" +
    "\031\120\040\123\044\075\045\074\046\113\047\126\050" +
    "\105\055\uffb8\057\111\060\125\061\104\062\121\063\107" +
    "\064\100\067\101\070\117\001\002\000\004\014\205\001" +
    "\002\000\032\005\uffac\006\uffac\007\uffac\010\uffac\012\uffac" +
    "\014\uffac\017\uffac\022\uffac\023\uffac\051\uffac\052\uffac\055" +
    "\uffac\001\002\000\032\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\012\uffc7\014\uffc7\017\uffc7\022\uffc7\023\uffc7\051\uffc7\052" +
    "\uffc7\055\uffc7\001\002\000\006\063\210\070\211\001\002" +
    "\000\032\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\014" +
    "\uffc1\017\uffc1\022\uffc1\023\uffc1\051\uffc1\052\uffc1\055\uffc1" +
    "\001\002\000\004\011\212\001\002\000\004\063\213\001" +
    "\002\000\004\012\214\001\002\000\032\005\uffc0\006\uffc0" +
    "\007\uffc0\010\uffc0\012\uffc0\014\uffc0\017\uffc0\022\uffc0\023" +
    "\uffc0\051\uffc0\052\uffc0\055\uffc0\001\002\000\006\051\217" +
    "\052\216\001\002\000\066\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\112\013\106\014\uffb8\022\uffb8\023\uffb8\030\110" +
    "\031\120\040\123\044\075\045\074\046\113\047\126\050" +
    "\105\055\uffb8\057\111\060\125\061\104\062\121\063\107" +
    "\064\100\067\101\070\117\001\002\000\066\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\011\112\013\106\014\uffb8\022\uffb8" +
    "\023\uffb8\030\110\031\120\040\123\044\075\045\074\046" +
    "\113\047\126\050\105\055\uffb8\057\111\060\125\061\104" +
    "\062\121\063\107\064\100\067\101\070\117\001\002\000" +
    "\004\014\221\001\002\000\032\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\012\uffab\014\uffab\017\uffab\022\uffab\023\uffab\051" +
    "\uffab\052\uffab\055\uffab\001\002\000\004\014\223\001\002" +
    "\000\032\005\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffaa\014" +
    "\uffaa\017\uffaa\022\uffaa\023\uffaa\051\uffaa\052\uffaa\055\uffaa" +
    "\001\002\000\066\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\112\013\106\014\uffb8\022\uffb8\023\uffb8\030\110\031\120" +
    "\040\123\044\075\045\074\046\113\047\126\050\105\055" +
    "\uffb8\057\111\060\125\061\104\062\121\063\107\064\100" +
    "\067\101\070\117\001\002\000\004\014\226\001\002\000" +
    "\032\005\uffa9\006\uffa9\007\uffa9\010\uffa9\012\uffa9\014\uffa9" +
    "\017\uffa9\022\uffa9\023\uffa9\051\uffa9\052\uffa9\055\uffa9\001" +
    "\002\000\074\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\112" +
    "\012\uffb8\013\106\014\uffb8\017\uffb8\022\uffb8\023\uffb8\030" +
    "\110\031\120\040\123\044\075\045\074\046\113\047\126" +
    "\050\105\051\uffb8\052\uffb8\057\111\060\125\061\104\062" +
    "\121\063\107\064\100\067\101\070\117\001\002\000\020" +
    "\012\uffd2\014\uffd2\017\uffd2\022\uffd2\023\uffd2\051\uffd2\052" +
    "\uffd2\001\002\000\076\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\112\012\uffb8\013\106\014\uffb8\017\uffb8\022\uffb8\023" +
    "\uffb8\030\110\031\120\040\123\044\075\045\074\046\113" +
    "\047\126\050\105\051\uffb8\052\uffb8\055\uffb8\057\111\060" +
    "\125\061\104\062\121\063\107\064\100\067\101\070\117" +
    "\001\002\000\076\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\112\012\uffb8\013\106\014\uffb8\017\uffb8\022\uffb8\023\uffb8" +
    "\030\110\031\120\040\123\044\075\045\074\046\113\047" +
    "\126\050\105\051\uffb8\052\uffb8\055\uffb8\057\111\060\125" +
    "\061\104\062\121\063\107\064\100\067\101\070\117\001" +
    "\002\000\032\005\uffce\006\uffce\007\152\010\151\012\uffce" +
    "\014\uffce\017\uffce\022\uffce\023\uffce\051\uffce\052\uffce\055" +
    "\uffce\001\002\000\032\005\uffcf\006\uffcf\007\152\010\151" +
    "\012\uffcf\014\uffcf\017\uffcf\022\uffcf\023\uffcf\051\uffcf\052" +
    "\uffcf\055\uffcf\001\002\000\006\040\237\063\236\001\002" +
    "\000\004\012\243\001\002\000\004\073\240\001\002\000" +
    "\004\063\241\001\002\000\004\012\242\001\002\000\032" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe\014\uffbe\017" +
    "\uffbe\022\uffbe\023\uffbe\051\uffbe\052\uffbe\055\uffbe\001\002" +
    "\000\032\005\uffbd\006\uffbd\007\uffbd\010\uffbd\012\uffbd\014" +
    "\uffbd\017\uffbd\022\uffbd\023\uffbd\051\uffbd\052\uffbd\055\uffbd" +
    "\001\002\000\006\002\uffe3\100\245\001\002\000\004\020" +
    "\247\001\002\000\004\002\uffff\001\002\000\066\005\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\011\112\013\106\017\uffb8\022" +
    "\uffb8\023\uffb8\030\110\031\120\040\123\044\075\045\074" +
    "\046\113\047\126\050\105\055\uffb8\057\111\060\125\061" +
    "\104\062\121\063\107\064\100\067\101\070\117\001\002" +
    "\000\004\017\251\001\002\000\004\002\uffe4\001\002\000" +
    "\032\005\uffc9\006\uffc9\007\uffc9\010\uffc9\012\uffc9\014\uffc9" +
    "\017\uffc9\022\uffc9\023\uffc9\051\uffc9\052\uffc9\055\uffc9\001" +
    "\002\000\004\013\274\001\002\000\004\013\271\001\002" +
    "\000\070\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\112\013" +
    "\106\022\uffb8\023\uffb8\030\110\031\120\040\123\044\075" +
    "\045\074\046\113\047\126\050\105\051\uffb8\052\uffb8\055" +
    "\uffb8\057\111\060\125\061\104\062\121\063\107\064\100" +
    "\067\101\070\117\001\002\000\004\013\257\001\002\000" +
    "\066\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\112\013\106" +
    "\014\uffb8\022\uffb8\023\uffb8\030\110\031\120\040\123\044" +
    "\075\045\074\046\113\047\126\050\105\055\uffb8\057\111" +
    "\060\125\061\104\062\121\063\107\064\100\067\101\070" +
    "\117\001\002\000\004\014\261\001\002\000\032\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\012\uffb2\014\uffb2\017\uffb2\022" +
    "\uffb2\023\uffb2\051\uffb2\052\uffb2\055\uffb2\001\002\000\006" +
    "\051\264\052\263\001\002\000\066\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\011\112\013\106\014\uffb8\022\uffb8\023\uffb8" +
    "\030\110\031\120\040\123\044\075\045\074\046\113\047" +
    "\126\050\105\055\uffb8\057\111\060\125\061\104\062\121" +
    "\063\107\064\100\067\101\070\117\001\002\000\066\005" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\011\112\013\106\014\uffb8" +
    "\022\uffb8\023\uffb8\030\110\031\120\040\123\044\075\045" +
    "\074\046\113\047\126\050\105\055\uffb8\057\111\060\125" +
    "\061\104\062\121\063\107\064\100\067\101\070\117\001" +
    "\002\000\004\014\266\001\002\000\032\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\012\uffb0\014\uffb0\017\uffb0\022\uffb0\023" +
    "\uffb0\051\uffb0\052\uffb0\055\uffb0\001\002\000\004\014\270" +
    "\001\002\000\032\005\uffaf\006\uffaf\007\uffaf\010\uffaf\012" +
    "\uffaf\014\uffaf\017\uffaf\022\uffaf\023\uffaf\051\uffaf\052\uffaf" +
    "\055\uffaf\001\002\000\066\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\112\013\106\014\uffb8\022\uffb8\023\uffb8\030\110" +
    "\031\120\040\123\044\075\045\074\046\113\047\126\050" +
    "\105\055\uffb8\057\111\060\125\061\104\062\121\063\107" +
    "\064\100\067\101\070\117\001\002\000\004\014\273\001" +
    "\002\000\032\005\uffae\006\uffae\007\uffae\010\uffae\012\uffae" +
    "\014\uffae\017\uffae\022\uffae\023\uffae\051\uffae\052\uffae\055" +
    "\uffae\001\002\000\066\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\112\013\106\014\uffb8\022\uffb8\023\uffb8\030\110\031" +
    "\120\040\123\044\075\045\074\046\113\047\126\050\105" +
    "\055\uffb8\057\111\060\125\061\104\062\121\063\107\064" +
    "\100\067\101\070\117\001\002\000\004\014\276\001\002" +
    "\000\032\005\uffb1\006\uffb1\007\uffb1\010\uffb1\012\uffb1\014" +
    "\uffb1\017\uffb1\022\uffb1\023\uffb1\051\uffb1\052\uffb1\055\uffb1" +
    "\001\002\000\014\025\305\032\303\033\304\075\301\076" +
    "\300\001\002\000\010\012\uffdf\017\uffdf\021\uffdf\001\002" +
    "\000\010\012\uffde\017\uffde\021\uffde\001\002\000\004\017" +
    "\306\001\002\000\010\012\uffe1\017\uffe1\021\uffe1\001\002" +
    "\000\010\012\uffe0\017\uffe0\021\uffe0\001\002\000\010\012" +
    "\uffe2\017\uffe2\021\uffe2\001\002\000\012\034\ufffc\035\ufffc" +
    "\063\ufffc\077\ufffc\001\002\000\006\011\312\015\310\001" +
    "\002\000\014\026\ufffb\027\ufffb\034\ufffb\063\ufffb\077\ufffb" +
    "\001\002\000\006\035\ufff4\037\ufff4\001\002\000\004\063" +
    "\313\001\002\000\004\020\322\001\002\000\006\012\317" +
    "\021\316\001\002\000\006\012\ufff3\021\ufff3\001\002\000" +
    "\004\063\313\001\002\000\004\015\310\001\002\000\006" +
    "\035\ufff5\037\ufff5\001\002\000\006\012\ufff2\021\ufff2\001" +
    "\002\000\014\025\305\032\303\033\304\075\301\076\300" +
    "\001\002\000\006\012\ufff1\021\ufff1\001\002\000\014\026" +
    "\011\027\014\034\ufffe\063\ufffe\077\ufffe\001\002\000\010" +
    "\034\uffef\063\015\077\327\001\002\000\004\034\333\001" +
    "\002\000\004\020\330\001\002\000\004\063\015\001\002" +
    "\000\006\017\332\021\017\001\002\000\004\034\uffee\001" +
    "\002\000\004\020\u0102\001\002\000\004\017\335\001\002" +
    "\000\004\065\337\001\002\000\006\043\uffed\065\uffed\001" +
    "\002\000\004\063\352\001\002\000\006\043\344\065\337" +
    "\001\002\000\004\017\uffdb\001\002\000\006\043\uffec\065" +
    "\uffec\001\002\000\004\017\347\001\002\000\004\020\345" +
    "\001\002\000\066\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\112\013\106\017\uffb8\022\uffb8\023\uffb8\030\110\031\120" +
    "\040\123\044\075\045\074\046\113\047\126\050\105\055" +
    "\uffb8\057\111\060\125\061\104\062\121\063\107\064\100" +
    "\067\101\070\117\001\002\000\004\017\uffd9\001\002\000" +
    "\006\016\351\043\344\001\002\000\004\017\uffda\001\002" +
    "\000\006\035\ufff0\037\ufff0\001\002\000\004\011\353\001" +
    "\002\000\004\012\354\001\002\000\004\015\355\001\002" +
    "\000\006\041\357\066\360\001\002\000\004\017\376\001" +
    "\002\000\004\020\374\001\002\000\004\020\361\001\002" +
    "\000\004\063\015\001\002\000\006\017\363\021\017\001" +
    "\002\000\004\041\357\001\002\000\004\017\365\001\002" +
    "\000\004\042\367\001\002\000\004\017\372\001\002\000" +
    "\004\020\370\001\002\000\066\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\112\013\106\017\uffb8\022\uffb8\023\uffb8\030" +
    "\110\031\120\040\123\044\075\045\074\046\113\047\126" +
    "\050\105\055\uffb8\057\111\060\125\061\104\062\121\063" +
    "\107\064\100\067\101\070\117\001\002\000\004\017\uffdc" +
    "\001\002\000\004\016\373\001\002\000\006\043\uffeb\065" +
    "\uffeb\001\002\000\066\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\112\013\106\017\uffb8\022\uffb8\023\uffb8\030\110\031" +
    "\120\040\123\044\075\045\074\046\113\047\126\050\105" +
    "\055\uffb8\057\111\060\125\061\104\062\121\063\107\064" +
    "\100\067\101\070\117\001\002\000\004\017\uffdd\001\002" +
    "\000\004\042\367\001\002\000\004\017\u0100\001\002\000" +
    "\004\016\u0101\001\002\000\006\043\uffea\065\uffea\001\002" +
    "\000\066\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\112\013" +
    "\106\017\uffb8\022\uffb8\023\uffb8\030\110\031\120\040\123" +
    "\044\075\045\074\046\113\047\126\050\105\055\uffb8\057" +
    "\111\060\125\061\104\062\121\063\107\064\100\067\101" +
    "\070\117\001\002\000\004\017\uffe9\001\002\000\006\021" +
    "\017\055\u0105\001\002\000\004\015\u0106\001\002\000\004" +
    "\064\023\001\002\000\006\016\u0108\021\024\001\002\000" +
    "\004\017\u0109\001\002\000\016\026\ufff9\027\ufff9\034\ufff9" +
    "\035\ufff9\063\ufff9\077\ufff9\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\006\030\003\041\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\007" +
    "\001\001\000\006\027\011\037\012\001\001\000\004\016" +
    "\u0103\001\001\000\012\016\030\021\032\025\033\026\031" +
    "\001\001\000\002\001\001\000\004\016\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\036" +
    "\033\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\045\031\043\032\044\034\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\045\031" +
    "\052\051\053\052\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\053\060\054\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\121\003\075\004\123" +
    "\005\076\006\102\007\126\010\101\011\115\012\113\042" +
    "\114\001\001\000\002\001\001\000\010\002\121\012\251" +
    "\042\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\121\003\214\004\123\005\076\006\102\007\126\010\101" +
    "\011\115\012\113\042\114\001\001\000\002\001\001\000" +
    "\010\002\121\012\205\042\114\001\001\000\002\001\001" +
    "\000\026\002\121\003\200\004\123\005\076\006\102\007" +
    "\126\010\101\011\115\012\113\042\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\121\012\140\042\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\121\003\130\004\123\005" +
    "\076\006\102\007\126\010\101\011\115\012\113\042\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\121\005\133\006\102\007\126\010\101\011\115\012\113" +
    "\042\114\001\001\000\002\001\001\000\020\002\121\006" +
    "\102\007\135\010\101\011\115\012\113\042\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\121\012\153\042\114" +
    "\001\001\000\010\002\121\012\152\042\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\121\003\163\004\123\005\076\006" +
    "\102\007\126\010\101\011\115\012\113\042\114\001\001" +
    "\000\002\001\001\000\026\002\121\003\161\004\123\005" +
    "\076\006\102\007\126\010\101\011\115\012\113\042\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\170\001\001\000\026\002\121\003\166" +
    "\004\123\005\076\006\102\007\126\010\101\011\115\012" +
    "\113\042\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\121\003" +
    "\173\004\123\005\076\006\102\007\126\010\101\011\115" +
    "\012\113\042\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\121\003\176\004\123\005\076\006\102" +
    "\007\126\010\101\011\115\012\113\042\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\121\003\203\004\123\005\076\006" +
    "\102\007\126\010\101\011\115\012\113\042\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\121\003\221\004\123\005\076\006\102" +
    "\007\126\010\101\011\115\012\113\042\114\001\001\000" +
    "\026\002\121\003\217\004\123\005\076\006\102\007\126" +
    "\010\101\011\115\012\113\042\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\121\003\224\004\123\005\076\006\102\007" +
    "\126\010\101\011\115\012\113\042\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\002\121\006\227\010" +
    "\101\011\115\012\113\042\114\001\001\000\002\001\001" +
    "\000\012\002\121\011\233\012\113\042\114\001\001\000" +
    "\012\002\121\011\232\012\113\042\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\121" +
    "\003\247\004\123\005\076\006\102\007\126\010\101\011" +
    "\115\012\113\042\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\121\003\261\004\123\005\076\006\102" +
    "\007\126\010\101\011\115\012\113\042\114\001\001\000" +
    "\002\001\001\000\026\002\121\003\257\004\123\005\076" +
    "\006\102\007\126\010\101\011\115\012\113\042\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\121\003\266\004\123\005\076\006\102\007" +
    "\126\010\101\011\115\012\113\042\114\001\001\000\026" +
    "\002\121\003\264\004\123\005\076\006\102\007\126\010" +
    "\101\011\115\012\113\042\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\002\121\003\271\004\123\005\076\006\102\007\126" +
    "\010\101\011\115\012\113\042\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\121\003\274\004\123" +
    "\005\076\006\102\007\126\010\101\011\115\012\113\042" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\310\001\001\000" +
    "\004\036\323\001\001\000\002\001\001\000\006\023\313" +
    "\024\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\320\001\001\000\004\022\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\322\001\001\000\002\001\001\000\006\027\324\037\012" +
    "\001\001\000\010\016\030\017\325\026\031\001\001\000" +
    "\004\013\333\001\001\000\002\001\001\000\004\016\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\047\335\050\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\045\342\046" +
    "\340\047\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\121\003" +
    "\345\004\123\005\076\006\102\007\126\010\101\011\115" +
    "\012\113\042\114\001\001\000\002\001\001\000\004\046" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\361\001\001\000\002\001\001\000" +
    "\004\043\363\001\001\000\002\001\001\000\004\044\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\121\003\370\004\123\005\076\006\102\007\126\010\101" +
    "\011\115\012\113\042\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\121\003\374" +
    "\004\123\005\076\006\102\007\126\010\101\011\115\012" +
    "\113\042\114\001\001\000\002\001\001\000\004\044\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\121\003\u0102\004\123\005\076\006\102" +
    "\007\126\010\101\011\115\012\113\042\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.err.println("\n\nSyntax Error - line: " +  (s.left+1) +  " - value:" + s.value);
        
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {    
         //System.err.println("\n\nUnrecovered Syntax error line: " +  (s.left+1) +  " - value:" + s.value);
    	report_fatal_error("", null);
	}                          	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // invkParam ::= ID 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  LinkedList<String> l = new LinkedList<String>();
						l.add(id);
                        RESULT = l;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invkParam",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // invkParamList ::= invkParamList COMMA invkParam 
            {
              LinkedList<String> RESULT =null;
		int listInvkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listInvkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> listInvk = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> par = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
																		  listInvk.addAll(par);
                                                 						  RESULT = listInvk;
                                              						   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invkParamList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // invkParamList ::= invkParam 
            {
              LinkedList<String> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> par = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		            
                                    RESULT = par;
                          	   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invkParamList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // invk ::= RUN ID LPARENT invkParamList RPARENT 
            {
              HashMap<String,LinkedList<String>> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> listP = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
													HashMap<String,LinkedList<String>> inks = new HashMap<String, LinkedList<String>>();
									  				inks.put(id, listP); 
									  				RESULT = inks;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invk",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // invk ::= RUN ID LPARENT RPARENT 
            {
              HashMap<String,LinkedList<String>> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
									  HashMap<String,LinkedList<String>> inks = new HashMap<String, LinkedList<String>>();
                                      LinkedList<String> pars = new LinkedList<String>();
									  inks.put(id, pars); 
									  RESULT = inks;
                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invk",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // processInvk ::= processInvk SEMICOLON invk 
            {
              HashMap<String,LinkedList<String>> RESULT =null;
		int listInvkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listInvkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,LinkedList<String>> listInvk = (HashMap<String,LinkedList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,LinkedList<String>> i = (HashMap<String,LinkedList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
														   Iterator<String> it = i.keySet().iterator();
														   while (it.hasNext()){
																String current = it.next();
																listInvk.put(current, i.get(current));
														   }		  
                                                           RESULT = listInvk;
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processInvk",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // processInvk ::= invk 
            {
              HashMap<String,LinkedList<String>> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,LinkedList<String>> i = (HashMap<String,LinkedList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                       
                                 RESULT = i;
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processInvk",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // proc ::= idList COLON ID 
            {
              HashMap<String,String> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String typeProc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												HashMap<String,String> processes = new HashMap<String,String>();
												for (int i=0; i<listNames.size(); i++){
													if (processes.containsKey(listNames.get(i)))
														parser.report_error("Duplicated instance declaration, line: "+listNamesleft, listNames);
													else
														processes.put(listNames.get(i), typeProc);
												}
												RESULT = processes;
                                          	  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // processDecl ::= processDecl SEMICOLON proc 
            {
              HashMap<String,String> RESULT =null;
		int listProcessleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listProcessright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,String> listProcess = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,String> lp = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
															Set<String> processes = lp.keySet();
															Iterator<String> iterator = processes.iterator();
															while (iterator.hasNext()){
																String currentProcess = iterator.next();
																if (listProcess.containsKey(currentProcess))
																	parser.report_error("Duplicated instance declaration, line: "+lpleft, lp);
																else
																	listProcess.put(currentProcess,lp.get(currentProcess));
															}
															RESULT = listProcess;
                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processDecl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // processDecl ::= proc 
            {
              HashMap<String,String> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,String> lp = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
						  RESULT = lp;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processDecl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // body ::= processDecl SEMICOLON processInvk SEMICOLON 
            {
              Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,String> declList = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int invkListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int invkListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,LinkedList<String>> invkList = (HashMap<String,LinkedList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
																			RESULT = new Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>>(declList, invkList);
										 								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // program ::= MAIN LPARENT RPARENT LBRACE body RBRACE 
            {
              Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> dec = (Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
														RESULT = dec;
													  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // temporalFormula ::= FUTURE LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.F, q, null, qleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // temporalFormula ::= LBRACKET expr WEAKUNTIL expr RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.W, p, q, pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // temporalFormula ::= LBRACKET expr UNTIL expr RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.U, p, q, pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // temporalFormula ::= GLOBALLY LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.G, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // temporalFormula ::= NEXT LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.X, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // temporalFormula ::= FORALL FUTURE LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AF, q, null, qleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // temporalFormula ::= FORALL LBRACKET expr WEAKUNTIL expr RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AW, p, q, pleft);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // temporalFormula ::= FORALL LBRACKET expr UNTIL expr RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AU, p, q, pleft);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // temporalFormula ::= FORALL GLOBALLY LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AG, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // temporalFormula ::= FORALL NEXT LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.AX, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // temporalFormula ::= EXIST FUTURE LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EF, q, null, qleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // temporalFormula ::= EXIST LBRACKET expr WEAKUNTIL temporalFormula RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EW, p, q, pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // temporalFormula ::= EXIST LBRACKET expr UNTIL expr RBRACKET 
            {
              ExprAux RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAux p = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux q = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EU, p, q, pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // temporalFormula ::= EXIST GLOBALLY LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EG, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // temporalFormula ::= EXIST NEXT LBRACKET expr RBRACKET 
            {
              ExprAux RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux s = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprAux(Operator.EX, s, null, sleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // temporalFormula ::= 
            {
              ExprAux RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporalFormula",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // primary ::= temporalFormula 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = f;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // primary ::= LPARENT expr RPARENT 
            {
              ExprAux RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux ex = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // primary ::= OWN LPARENT ID RPARENT 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
													ExprAux v = new ExprAux(id, idleft);
													v.setOwner("par");
													v.setUnqualifiedName(id);
													RESULT = new ExprAux(Operator.OWN, v, null, idleft);  
												 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // primary ::= OWN LPARENT GLOBAL DOT ID RPARENT 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
													ExprAux v = new ExprAux("global."+id, idleft);
													v.setOwner("global");
													v.setUnqualifiedName(id);
													RESULT = new ExprAux(Operator.OWN, v, null, idleft);  
												 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // primary ::= AV LPARENT ID RPARENT 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
													ExprAux v = new ExprAux(id, idleft);
													v.setOwner("par");
													v.setUnqualifiedName(id);
													RESULT = new ExprAux(Operator.AV, v, null, idleft); 
												
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // primary ::= AV LPARENT GLOBAL DOT ID RPARENT 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
													ExprAux v = new ExprAux("global."+id, idleft);
													v.setOwner("global");
													v.setUnqualifiedName(id);
													RESULT = new ExprAux(Operator.AV, v, null, idleft); 
												
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // primary ::= GLOBAL DOT ID 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ExprAux v = new ExprAux("global."+id, idleft);
									v.setOwner("global"); // we set the owner could be this, global or any other process
									v.setUnqualifiedName(id);
									RESULT = v;
			     				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // primary ::= ID DOT OWN LPARENT ID RPARENT 
            {
              ExprAux RESULT =null;
		int ownerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ownerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String owner = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
														ExprAux v = new ExprAux(owner+"."+id, idleft);
														v.setOwner(owner);
														v.setUnqualifiedName(id);
														RESULT = new ExprAux(Operator.OWN, v, null, idleft);  
														
												   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // primary ::= ID DOT ID 
            {
              ExprAux RESULT =null;
		int ownerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ownerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String owner = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ExprAux v = new ExprAux(owner+"."+id, idleft);
									v.setOwner(owner); // we set the owner could be this, global or any other process
									v.setUnqualifiedName(id);
									RESULT = v;
			     				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // primary ::= ENUMCONS 
            {
              ExprAux RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						 ExprAux v = new ExprAux(e, eleft);
						 
						 v.isEnumCons();  // we indicate that it is an enum constant
						 RESULT = v;
					   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // primary ::= ID 
            {
              ExprAux RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	  				ExprAux v = new ExprAux(id, idleft);
	  				v.setOwner("par"); // if no owner it is a parameter
					v.setUnqualifiedName(id); // the unqualified name is the same
	  				RESULT = v;
	  		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // primary ::= FALSE 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
					ExprAux c = new ExprAux(false, fleft);
					RESULT = c;
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // primary ::= TRUE 
            {
              ExprAux RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					ExprAux c = new ExprAux(true, tleft);
					RESULT = c;	
				  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // primary ::= INTEGER 
            {
              ExprAux RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExprAux c = new ExprAux(v, vleft);
						  RESULT = c;
					   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= INC factor 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprAux(Operator.INC, f, null, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= DEC factor 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprAux(Operator.DEC, f, null, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= NEG factor 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprAux(Operator.NOT, f, null, fleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= primary 
            {
              ExprAux RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = op;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= term SLASH factor 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
   										ExprAux d = new ExprAux(Operator.DIV, op1,  op2, op1left);
										RESULT = d;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= term ASTERISK factor 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										   ExprAux m = new ExprAux(Operator.MULT, op1, op2, op1left);
										   RESULT = m;
										 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= factor 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // addition ::= addition MINUS term 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											  ExprAux sum = new ExprAux(Operator.MINUS, op1, op2, op1left);
											  RESULT = sum;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // addition ::= addition PLUS term 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											 ExprAux sum = new ExprAux(Operator.SUM, op1, op2, op1left);
											 RESULT = sum;
										   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // addition ::= term 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relation ::= addition 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparison ::= relation EQ relation 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprAux(Operator.EQ, op1, op2, op1left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparison ::= relation 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // conjunction ::= conjunction AND comparison 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new ExprAux(Operator.AND, op1, op2, op1left);
												   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // conjunction ::= comparison 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // disjunction ::= disjunction OR conjunction 
            {
              ExprAux RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux op1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux op2 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExprAux(Operator.OR, op1, op2, op1left);		
												  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // disjunction ::= conjunction 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= disjunction 
            {
              ExprAux RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux val = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // invariant ::= INVARIANT COLON expr 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
													RESULT = f;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invariant",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // invariantList ::= invariantList SEMICOLON invariant 
            {
              LinkedList<ExprAux> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> list = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux i = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
																list.add(i);
																RESULT = list;
															 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invariantList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // invariantList ::= invariant 
            {
              LinkedList<ExprAux> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux i = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								LinkedList<ExprAux> list = new LinkedList<ExprAux>();
								list.add(i);
								RESULT = list;
							  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("invariantList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // postcond ::= POST COLON expr 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postcond",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // precond ::= PRE COLON expr 
            {
              ExprAux RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux f = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  f;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("precond",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= PRIMBOOL 
            {
              Type RESULT =null;
		 RESULT = Type.PRIMBOOL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= PRIMINT 
            {
              Type RESULT =null;
		 RESULT = Type.PRIMINT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= LOCK 
            {
              Type RESULT =null;
		 RESULT = Type.LOCK; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = Type.BOOL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assumptionStmt ::= 
            {
              ExprAux RESULT =null;
		 RESULT = null;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assumptionStmt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assumptionStmt ::= ASSUMPTION COLON expr SEMICOLON 
            {
              ExprAux RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAux e1 = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assumptionStmt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // enumDecls ::= enumDecls COMMA ENUMCONS 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											if (list.contains(e))
										  		parser.report_error("Duplicated enum constant declaration, line: "+eleft, e);	
										  	else{
												list.add(e);
                                          		RESULT = list;
											}
                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumDecls",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // enumDecls ::= ENUMCONS 
            {
              LinkedList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						    LinkedList<String> list = new LinkedList<String>();
							list.add(e);
							RESULT = list; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumDecls",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // idList ::= idList COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											if (list.contains(i))
										  		parser.report_error("Duplicated var declaration, line: "+ileft, i);	
										  	else{
												list.add(i);
                                          		RESULT = list;
											}
                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // idList ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  LinkedList<String> list = new LinkedList<String>();
                       			 list.add(i);
                       			 RESULT = list; 
                  			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // initialCond ::= INIT COLON expr 
            {
              ExprAux RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux e = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e;  
								  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initialCond",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // actiondef ::= ACTION ID LPARENT RPARENT LBRACE precond SEMICOLON postcond SEMICOLON RBRACE 
            {
              ActionAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprAux pre = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int postleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int postright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux post = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
																													 ActionAux a= new ActionAux(name);		
																													 a.setPre(pre);
																													 a.setPost(post);																													 
			 																										 RESULT = a;	
																												  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actiondef",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // actiondef ::= ACTION ID LPARENT RPARENT LBRACE FRAME COLON idList SEMICOLON precond SEMICOLON postcond SEMICOLON RBRACE 
            {
              ActionAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int frameListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int frameListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<String> frameList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprAux pre = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int postleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int postright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux post = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
																													 ActionAux a= new ActionAux(name);		
																													 a.setPre(pre);
																													 a.setPost(post);
																													 a.addAllFrame(frameList);
			 																										 RESULT = a;	
																												  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actiondef",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // actionlist ::= actionlist actiondef 
            {
              LinkedList<ActionAux> RESULT =null;
		int listAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ActionAux> listA = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActionAux a = (ActionAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listA.add(a);
											  RESULT = listA;
										   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actionlist",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // actionlist ::= actiondef 
            {
              LinkedList<ActionAux> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActionAux a = (ActionAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ActionAux> res = new LinkedList<ActionAux>();
							 res.add(a);
							 RESULT = res;			 
						  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actionlist",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ownsStmt ::= OWNS COLON idList SEMICOLON 
            {
              LinkedList<String> RESULT =null;
		int ownsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ownsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> ownsList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ownsList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ownsStmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ownsStmt ::= 
            {
              LinkedList<String> RESULT =null;
		 RESULT = new LinkedList<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ownsStmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bodyProcess ::= LBRACE enumList varList ownsStmt initialCond SEMICOLON actionlist invariantList SEMICOLON RBRACE 
            {
              ProcessAux RESULT =null;
		int listEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int listEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		HashMap<String,Pair<LinkedList<String>,Type>> listE = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ownsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ownsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<String> ownsList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprAux init = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<ActionAux> aList = (LinkedList<ActionAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprAux> inv = (LinkedList<ExprAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 					   ProcessAux proc = new ProcessAux(listDleft);
																																					   proc.setInit(init);	
																																					   proc.addAllLocalVars(listD);
																																					   proc.addAllValuesToEnum(listE);
																																						//proc.setPre(pre);
																																					   //proc.setPost(post);
																																					   proc.addAllOwnedVars(ownsList); // the list of owned vars
																																					   proc.addAllActions(aList);
																																					   proc.addAllInvs(inv);						
                                                                                                                                     			       RESULT = proc;
                                                                                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyProcess",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= ID COLON type 
            {
              LinkedList<Pair<String,Type>> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  //HashMap<String, Type> dec = new HashMap<String, Type>();
								   //dec.put(name, t)
								   LinkedList<Pair<String, Type>> dec = new LinkedList<Pair<String, Type>>();
								   dec.add(new Pair(name, t));
								   RESULT = dec;
                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramList ::= paramList COMMA param 
            {
              LinkedList<Pair<String,Type>> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Pair<String,Type>> list = (LinkedList<Pair<String,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pair<String,Type>> p = (LinkedList<Pair<String,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                list.addAll(p);
												RESULT = list;								
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramList ::= param 
            {
              LinkedList<Pair<String,Type>> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pair<String,Type>> p = (LinkedList<Pair<String,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = p;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // process ::= PROCESS ID bodyProcess 
            {
              ProcessAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux proc = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  proc.setName(name);
                                                  RESULT = proc;
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("process",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // process ::= PROCESS ID LPARENT paramList RPARENT bodyProcess 
            {
              ProcessAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Pair<String,Type>> listP = (LinkedList<Pair<String,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux proc = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   proc.setName(name);
                                                                                                     //proc.setParamList(listP);
																									 proc.addAllParameters(listP);
                                                                                                     RESULT = proc;
                                                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("process",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // processList ::= processList process 
            {
              LinkedList<ProcessAux> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ProcessAux> list = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux p = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list.add(p);
                                               RESULT = list; 
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // processList ::= process 
            {
              LinkedList<ProcessAux> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcessAux p = (ProcessAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                               LinkedList<ProcessAux> list = new LinkedList<ProcessAux>();
							   list.add(p);
							   RESULT = list;   
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("processList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // enumDecl ::= PRIMENUM idList EQ LBRACE enumDecls RBRACE 
            {
              HashMap<String,Pair<LinkedList<String>,Type>> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
																	  HashMap<String, Pair<LinkedList<String>,Type>> result = new HashMap<String, Pair<LinkedList<String>,Type>>();
																	  for (String var:listNames){
																		Pair<LinkedList<String>,Type> description = new Pair<LinkedList<String>,Type>();
																		description.setFirst(ids);
																		description.setSecond(Type.ENUMPRIM);
																	  	result.put(var, description);
																	  }	
																	  RESULT = result;
																   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumDecl",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // enumDecl ::= ENUM idList EQ LBRACE enumDecls RBRACE SEMICOLON 
            {
              HashMap<String,Pair<LinkedList<String>,Type>> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
																	  HashMap<String, Pair<LinkedList<String>,Type>> result = new HashMap<String, Pair<LinkedList<String>,Type>>();
																	  for (String var:listNames){
																		Pair<LinkedList<String>,Type> description = new Pair<LinkedList<String>,Type>();
																		description.setFirst(ids);
																		description.setSecond(Type.ENUM);
																	  	result.put(var, description);
																	  }	
																	  RESULT = result;
																   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumDecl",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // enumList ::= enumList enumDecl 
            {
              HashMap<String,Pair<LinkedList<String>,Type>> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Pair<LinkedList<String>,Type>> list = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Pair<LinkedList<String>,Type>> listE = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
 															for (String var:listE.keySet()){
																if (list.keySet().contains(var))
																	parser.report_error("Repeated var declaration, line:"+listleft, list);
																else
																	list.put(var, listE.get(var));
															}
															RESULT = list;
											      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumList",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // enumList ::= 
            {
              HashMap<String,Pair<LinkedList<String>,Type>> RESULT =null;
		 RESULT = new HashMap<String, Pair<LinkedList<String>,Type>>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumList",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varDecl ::= idList COLON type SEMICOLON 
            {
              HashMap<String,Type> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				HashMap<String, Type> vars = new HashMap<String,Type>();	
														for (int i = 0; i < listNames.size(); i++){
														  	if (vars.containsKey(listNames.get(i))){ // if repeated var then error
																parser.report_error("Repeated var declaration, line:"+listNamesleft, listNames);
															}
															else{
																vars.put(listNames.get(i), t);
															}
														}
														RESULT = vars;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // varList ::= varList varDecl 
            {
              HashMap<String,Type> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Type> list = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Type> listD = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
																	//HashMap<String,String> d = new HashMap<String, String>(); 
														
																	Set<String> keys = listD.keySet();
																	Iterator<String> it = keys.iterator();
																	while(it.hasNext()){
																		String elem = it.next();
																		if (list.containsKey(elem)){
																			parser.report_error("Repeated var declaration, line:"+listleft, list);
																		}
																		else{
																			list.put(elem, listD.get(elem));
																		}
																	}
																	RESULT = list;
                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // varList ::= 
            {
              HashMap<String,Type> RESULT =null;
		 RESULT = new HashMap<String,Type>();; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // specification ::= SPEC ID enumList varList processList program PROPERTY COLON expr SEMICOLON assumptionStmt 
            {
              SpecAux RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		HashMap<String,Pair<LinkedList<String>,Type>> eList = (HashMap<String,Pair<LinkedList<String>,Type>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		HashMap<String,Type> vList = (HashMap<String,Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<ProcessAux> pList = (LinkedList<ProcessAux>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>> main = (Pair<HashMap<String,String>,HashMap<String,LinkedList<String>>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int gfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAux gf = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAux as = (ExprAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
																					// TBD: ADD ENUM ACTIONS
																					SpecAux spec= new SpecAux(name);
 																					if (!vList.isEmpty())
																						spec.addAllSharedVars(vList);
																					spec.addAllProcesses(pList);
																					if (gf != null)																			
																						spec.addInvariant(gf);
																					if (as != null)
																						spec.addAssumption(as);
																					if (!eList.isEmpty())
																						spec.addAllValuesToEnum(eList);

																					// we add the instances
																					Set<String> keys = main.getFirst().keySet();
																					Iterator<String> it = keys.iterator();
																					while (it.hasNext()){
																						String current = it.next();
																						spec.addInstance(current, main.getFirst().get(current));
																					}
																					// we add its parameters
																					Set<String> keysP = main.getSecond().keySet();
																					Iterator<String> itP = keysP.iterator();
																					while (itP.hasNext()){
																						String currentP = itP.next();
																						spec.addInstanceActualPars(currentP, main.getSecond().get(currentP));
																					}
																					RESULT = spec;
                                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // mainSpecification ::= specification 
            {
              SpecAux RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SpecAux prog = (SpecAux)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = prog; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainSpecification",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= mainSpecification EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SpecAux start_val = (SpecAux)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

