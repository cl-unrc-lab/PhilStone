MODULE main 

VAR
    Av_m : boolean;

    p1:process p(Av_m);
    p2:process p(Av_m);
ASSIGN
init(Av_m) := TRUE;
LTLSPEC
    ( G ((!(p1.Prop_cs) | !(p2.Prop_cs))))
MODULE p(Av_m)
VAR
    Prop_cs:boolean;
    Own_m:boolean;
    Prop_try:boolean;
    Prop_ncs:boolean;
    state : {Node13,Node10,Node8,Node7,Node6,Node5,Node4,Node3,Node2};
ASSIGN
    init(Prop_cs) := FALSE;
    init(Own_m) := FALSE;
    init(Prop_try) := FALSE;
    init(Prop_ncs) := TRUE;
    init(state) := Node13;
    next(Prop_cs):=case
        state = Node13 & next(state) = Node10 & Av_m : {FALSE };
        state = Node10 & next(state) = Node3 & Av_m : {FALSE };
        state = Node13 & next(state) = Node10 & Av_m : {FALSE };
        state = Node13 & next(state) = Node10 & !Av_m : {FALSE };
        state = Node3 & next(state) = Node2 & !Av_m : {TRUE };
        state = Node2 & next(state) = Node13 & !Av_m : {FALSE };
        TRUE : {Prop_cs};
    esac;
    next(Own_m):=case
        state = Node13 & next(state) = Node10 & Av_m : {FALSE };
        state = Node10 & next(state) = Node3 & Av_m : {TRUE };
        state = Node13 & next(state) = Node10 & Av_m : {FALSE };
        state = Node13 & next(state) = Node10 & !Av_m : {FALSE };
        state = Node3 & next(state) = Node2 & !Av_m : {TRUE };
        state = Node2 & next(state) = Node13 & !Av_m : {FALSE };
        TRUE : {Own_m};
    esac;
    next(Prop_try):=case
        state = Node13 & next(state) = Node10 & Av_m : {TRUE };
        state = Node10 & next(state) = Node3 & Av_m : {TRUE };
        state = Node13 & next(state) = Node10 & Av_m : {TRUE };
        state = Node13 & next(state) = Node10 & !Av_m : {TRUE };
        state = Node3 & next(state) = Node2 & !Av_m : {FALSE };
        state = Node2 & next(state) = Node13 & !Av_m : {FALSE };
        TRUE : {Prop_try};
    esac;
    next(Prop_ncs):=case
        state = Node13 & next(state) = Node10 & Av_m : {FALSE };
        state = Node10 & next(state) = Node3 & Av_m : {FALSE };
        state = Node13 & next(state) = Node10 & Av_m : {FALSE };
        state = Node13 & next(state) = Node10 & !Av_m : {FALSE };
        state = Node3 & next(state) = Node2 & !Av_m : {FALSE };
        state = Node2 & next(state) = Node13 & !Av_m : {TRUE };
        TRUE : {Prop_ncs};
    esac;
    next(Av_m):=case
        state = Node13 & next(state) = Node10 & Av_m : {TRUE };
        state = Node10 & next(state) = Node3 & Av_m : {FALSE };
        state = Node13 & next(state) = Node10 & Av_m : {TRUE };
        state = Node13 & next(state) = Node10 & !Av_m : {FALSE };
        state = Node3 & next(state) = Node2 & !Av_m : {FALSE };
        state = Node2 & next(state) = Node13 & !Av_m : {TRUE };
        TRUE : {Av_m};
    esac;
next(state):= case
        state = Node13 & Av_m : {Node10 };
        state = Node10 & Av_m : {Node3 };
        state = Node13 & Av_m : {Node10 };
        state = Node13 & !Av_m : {Node10 };
        state = Node3 & !Av_m : {Node2 };
        state = Node2 & !Av_m : {Node13 };
        TRUE :  { state };
    esac;
FAIRNESS    running;