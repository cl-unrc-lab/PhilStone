Enum stateproc1 = {Node1,Node0,Node10,Node11};
Enum stateproc2 = {Node1,Node0,Node11,Node2};
Global Av_try1 : BOOL;
Global try1 : BOOL;
Global Av_try2 : BOOL;
Global try2 : BOOL;
Global Av_turn : BOOL;
Global turn : BOOL;

Process proc1{
Prop_try1, Prop_try2, Prop_turn, Own_try1, Own_try2, Own_turn, Prop_cs : BOOL;
state : stateproc1;
Initial : state == Node10 && Prop_try1 && Prop_try2 && Prop_turn && !Own_try1 && Own_try2 && Own_turn && Av_try1 && !Prop_cs && !Av_turn;
Normative : true;
state == Node1 && !Av_try1 && !Av_turn -> state=Node1,Prop_try1=false,Prop_try2=true,Prop_turn=true,Own_try1=true,Own_try2=true,Own_turn=true,Av_try1=false,Prop_cs=false,Av_turn=false;
state == Node0 && !Av_try1 && !Av_turn -> state=Node1,Prop_try1=false,Prop_try2=true,Prop_turn=true,Own_try1=true,Own_try2=true,Own_turn=true,Av_try1=false,Prop_cs=false,Av_turn=false;
state == Node10 && !Av_try1 && !Av_turn -> state=Node11,Prop_try1=false,Prop_try2=false,Prop_turn=true,Own_try1=false,Own_try2=true,Own_turn=false,Av_try1=false,Prop_cs=true,Av_turn=true;
state == Node10 && Av_try1 && !Av_turn -> state=Node0,Prop_try1=true,Prop_try2=true,Prop_turn=true,Own_try1=true,Own_try2=true,Own_turn=true,Av_try1=false,Prop_cs=false,Av_turn=false;
state == Node10 && Av_try1 && !Av_turn -> state=Node10,Prop_try1=true,Prop_try2=true,Prop_turn=true,Own_try1=false,Own_try2=true,Own_turn=true,Av_try1=true,Prop_cs=false,Av_turn=false;
state == Node10 && Av_try1 && !Av_turn -> state=Node1,Prop_try1=false,Prop_try2=true,Prop_turn=true,Own_try1=true,Own_try2=true,Own_turn=true,Av_try1=false,Prop_cs=false,Av_turn=false;
state == Node10 && Av_try1 && !Av_turn -> state=Node10,Prop_try1=false,Prop_try2=true,Prop_turn=true,Own_try1=false,Own_try2=true,Own_turn=true,Av_try1=true,Prop_cs=false,Av_turn=false;
}Process proc2{
Prop_try1, Prop_try2, Own_try1, Own_try2, Own_turn, Prop_cs, Prop_turn : BOOL;
state : stateproc2;
Initial : state == Node1 && Prop_try1 && Prop_try2 && Own_try1 && !Own_try2 && Own_turn && Av_try2 && !Prop_cs && !Av_turn && !Prop_turn;
Normative : true;
state == Node1 && Av_try2 && !Av_turn -> state=Node0,Prop_try1=true,Prop_try2=true,Own_try1=true,Own_try2=true,Own_turn=true,Av_try2=false,Prop_cs=false,Av_turn=false,Prop_turn=false;
state == Node1 && Av_try2 && !Av_turn -> state=Node11,Prop_try1=true,Prop_try2=true,Own_try1=true,Own_try2=false,Own_turn=false,Av_try2=true,Prop_cs=true,Av_turn=true,Prop_turn=false;
state == Node0 && !Av_try2 && !Av_turn -> state=Node0,Prop_try1=true,Prop_try2=true,Own_try1=true,Own_try2=true,Own_turn=true,Av_try2=false,Prop_cs=false,Av_turn=false,Prop_turn=false;
state == Node1 && Av_try2 && !Av_turn -> state=Node2,Prop_try1=true,Prop_try2=false,Own_try1=true,Own_try2=true,Own_turn=true,Av_try2=false,Prop_cs=false,Av_turn=false,Prop_turn=false;
state == Node1 && Av_try2 && !Av_turn -> state=Node1,Prop_try1=true,Prop_try2=false,Own_try1=true,Own_try2=false,Own_turn=true,Av_try2=true,Prop_cs=false,Av_turn=false,Prop_turn=false;
state == Node1 && !Av_try2 && !Av_turn -> state=Node1,Prop_try1=true,Prop_try2=false,Own_try1=true,Own_try2=false,Own_turn=true,Av_try2=false,Prop_cs=false,Av_turn=false,Prop_turn=false;
state == Node2 && !Av_try2 && !Av_turn -> state=Node2,Prop_try1=true,Prop_try2=false,Own_try1=true,Own_try2=true,Own_turn=true,Av_try2=false,Prop_cs=false,Av_turn=false,Prop_turn=false;
}
Main(){
p1:proc1;
p2:proc2;
run p1();run p2();}